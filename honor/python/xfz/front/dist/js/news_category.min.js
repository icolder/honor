function NewsCategory(){}NewsCategory.prototype.listenAddCategoryEvent=function(){$("#add-btn").click(function(){Swal.fire({title:"添加标签",input:"text",inputPlaceholder:"请输入标签"}).then(function(t){$.ajax({url:"/cms/add_news_category/",type:"POST",data:{name:t.value},success:function(t){200===t.code&&window.location.reload()}})})})},NewsCategory.prototype.listenEditCategoryEvent=function(){$(".edit-btn").click(function(){var t=$(this).parent().parent(),e=t.attr("data-pk"),n=t.attr("data-name");Swal.fire({title:"修改标签",input:"text",inputPlaceholder:"请输入新的标签",inputValue:n}).then(function(t){$.ajax({url:"/cms/edit_news_category/",type:"POST",data:{pk:e,name:t.value},success:function(t){200===t.code&&window.location.reload()}})})})},NewsCategory.prototype.listenDeleteCategory=function(){$(".delete-btn").click(function(){var t=$(this).parent().parent().attr("data-pk");$.ajax({url:"/cms/delete_news_category/",type:"POST",data:{pk:t},success:function(t){200===t.code&&window.location.reload()}})})},NewsCategory.prototype.run=function(){var t=this;t.listenAddCategoryEvent(),t.listenEditCategoryEvent(),t.listenDeleteCategory()},$(function(){(new NewsCategory).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5ld3NfY2F0ZWdvcnkuanMiXSwibmFtZXMiOlsiTmV3c0NhdGVnb3J5IiwicHJvdG90eXBlIiwibGlzdGVuQWRkQ2F0ZWdvcnlFdmVudCIsIiQiLCJjbGljayIsIlN3YWwiLCJmaXJlIiwidGl0bGUiLCJpbnB1dCIsImlucHV0UGxhY2Vob2xkZXIiLCJ0aGVuIiwiaW5wdXRWYWx1ZSIsImFqYXgiLCJ1cmwiLCJ0eXBlIiwiZGF0YSIsIm5hbWUiLCJ2YWx1ZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsImxpc3RlbkVkaXRDYXRlZ29yeUV2ZW50IiwidHIiLCJ0aGlzIiwicGFyZW50IiwicGsiLCJhdHRyIiwibGlzdGVuRGVsZXRlQ2F0ZWdvcnkiLCJydW4iLCJzZWxmIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxnQkFLVEEsYUFBYUMsVUFBVUMsdUJBQXlCLFdBQy9CQyxFQUFFLFlBQ1JDLE1BQU0sV0FDVEMsS0FBS0MsS0FBSyxDQUNOQyxNQUFPLE9BQ1BDLE1BQU8sT0FDUEMsaUJBQWtCLFVBQ25CQyxLQUFLLFNBQVVDLEdBQ1ZSLEVBQUVTLEtBQUssQ0FDSEMsSUFBTywwQkFDUEMsS0FBUSxPQUNSQyxLQUFRLENBQ0pDLEtBQVFMLEVBQVdNLE9BRXZCQyxRQUFXLFNBQVVDLEdBQ00sTUFBbkJBLEVBQWEsTUFDYkMsT0FBT0MsU0FBU0MsaUJBUTVDdEIsYUFBYUMsVUFBVXNCLHdCQUEwQixXQUMvQnBCLEVBQUUsYUFDUkMsTUFBTSxXQUNWLElBQ0lvQixFQURhckIsRUFBRXNCLE1BQ0NDLFNBQVNBLFNBQ3pCQyxFQUFLSCxFQUFHSSxLQUFLLFdBQ2JaLEVBQU9RLEVBQUdJLEtBQUssYUFDbkJ2QixLQUFLQyxLQUFLLENBQ05DLE1BQU8sT0FDUEMsTUFBTyxPQUNQQyxpQkFBa0IsVUFDbEJFLFdBQVlLLElBQ2JOLEtBQUssU0FBVUMsR0FDZFIsRUFBRVMsS0FBSyxDQUNIQyxJQUFPLDJCQUNQQyxLQUFRLE9BQ1JDLEtBQVEsQ0FDSlksR0FBTUEsRUFDTlgsS0FBUUwsRUFBV00sT0FFdkJDLFFBQVcsU0FBVUMsR0FDTSxNQUFuQkEsRUFBYSxNQUNiQyxPQUFPQyxTQUFTQyxpQkFTeEN0QixhQUFhQyxVQUFVNEIscUJBQXVCLFdBQzdCMUIsRUFBRSxlQUNSQyxNQUFNLFdBQ1QsSUFFSXVCLEVBRmF4QixFQUFFc0IsTUFDQ0MsU0FBU0EsU0FDakJFLEtBQUssV0FDakJ6QixFQUFFUyxLQUFLLENBQ0hDLElBQU8sNkJBQ1BDLEtBQVEsT0FDUkMsS0FBUSxDQUNKWSxHQUFNQSxHQUVWVCxRQUFXLFNBQVVDLEdBQ00sTUFBbkJBLEVBQWEsTUFDYkMsT0FBT0MsU0FBU0MsZUFPcEN0QixhQUFhQyxVQUFVNkIsSUFBTSxXQUN6QixJQUFJQyxFQUFPTixLQUNYTSxFQUFLN0IseUJBQ0w2QixFQUFLUiwwQkFDTFEsRUFBS0Ysd0JBR1QxQixFQUFFLFlBQ29CLElBQUlILGNBQ1Y4QiIsImZpbGUiOiJuZXdzX2NhdGVnb3J5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIE5ld3NDYXRlZ29yeSgpIHtcclxuXHJcbn07XHJcblxyXG5cclxuTmV3c0NhdGVnb3J5LnByb3RvdHlwZS5saXN0ZW5BZGRDYXRlZ29yeUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFkZEJ0biA9ICQoXCIjYWRkLWJ0blwiKTtcclxuICAgIGFkZEJ0bi5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgdGl0bGU6ICfmt7vliqDmoIfnrb4nLFxyXG4gICAgICAgICAgICBpbnB1dDogJ3RleHQnLFxyXG4gICAgICAgICAgICBpbnB1dFBsYWNlaG9sZGVyOiAn6K+36L6T5YWl5qCH562+JyxcclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICd1cmwnOiAnL2Ntcy9hZGRfbmV3c19jYXRlZ29yeS8nLFxyXG4gICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICdkYXRhJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGlucHV0VmFsdWUudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Wydjb2RlJ10gPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgIH0pO1xyXG59O1xyXG5cclxuTmV3c0NhdGVnb3J5LnByb3RvdHlwZS5saXN0ZW5FZGl0Q2F0ZWdvcnlFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBlZGl0QnRuID0gJChcIi5lZGl0LWJ0blwiKTtcclxuICAgIGVkaXRCdG4uY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50QnRuID0gJCh0aGlzKTtcclxuICAgICAgICB2YXIgdHIgPSBjdXJyZW50QnRuLnBhcmVudCgpLnBhcmVudCgpO1xyXG4gICAgICAgIHZhciBwayA9IHRyLmF0dHIoXCJkYXRhLXBrXCIpO1xyXG4gICAgICAgIHZhciBuYW1lID0gdHIuYXR0cihcImRhdGEtbmFtZVwiKTtcclxuICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICB0aXRsZTogJ+S/ruaUueagh+etvicsXHJcbiAgICAgICAgICAgIGlucHV0OiAndGV4dCcsXHJcbiAgICAgICAgICAgIGlucHV0UGxhY2Vob2xkZXI6ICfor7fovpPlhaXmlrDnmoTmoIfnrb4nLFxyXG4gICAgICAgICAgICBpbnB1dFZhbHVlOiBuYW1lXHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgJ3VybCc6ICcvY21zL2VkaXRfbmV3c19jYXRlZ29yeS8nLFxyXG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAnZGF0YSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAncGsnOiBwayxcclxuICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGlucHV0VmFsdWUudmFsdWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAnc3VjY2Vzcyc6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Wydjb2RlJ10gPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG5cclxufTtcclxuXHJcbk5ld3NDYXRlZ29yeS5wcm90b3R5cGUubGlzdGVuRGVsZXRlQ2F0ZWdvcnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZGVsQnRuID0gJChcIi5kZWxldGUtYnRuXCIpO1xyXG4gICAgZGVsQnRuLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3VycmVudEJ0biA9ICQodGhpcyk7XHJcbiAgICAgICAgdmFyIHRyID0gY3VycmVudEJ0bi5wYXJlbnQoKS5wYXJlbnQoKTtcclxuICAgICAgICB2YXIgcGsgPSB0ci5hdHRyKFwiZGF0YS1wa1wiKTtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAndXJsJzogJy9jbXMvZGVsZXRlX25ld3NfY2F0ZWdvcnkvJyxcclxuICAgICAgICAgICAgJ3R5cGUnOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICdkYXRhJzoge1xyXG4gICAgICAgICAgICAgICAgJ3BrJzogcGtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0Wydjb2RlJ10gPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbk5ld3NDYXRlZ29yeS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5saXN0ZW5BZGRDYXRlZ29yeUV2ZW50KCk7XHJcbiAgICBzZWxmLmxpc3RlbkVkaXRDYXRlZ29yeUV2ZW50KCk7XHJcbiAgICBzZWxmLmxpc3RlbkRlbGV0ZUNhdGVnb3J5KCk7XHJcbn07XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBuZXdDYXRlZ29yeSA9IG5ldyBOZXdzQ2F0ZWdvcnkoKTtcclxuICAgIG5ld0NhdGVnb3J5LnJ1bigpO1xyXG59KTsiXX0=
